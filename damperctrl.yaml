substitutions:
  name: damperctrl
  friendly_name: Damper Control
  location: "--"
  room: "--"
  maxbrightness: "0.0"
  version: "0.32"

esphome:
  platform: ESP8266
  board: d1_mini
  name: "${name}"
  name_add_mac_suffix: true

  project:
    name: esphome.damperctrl
    version: "${version}"

  on_boot:
    then:
      - delay: 5s
      - stepper.set_speed:
          id: my_stepper
          speed: 200
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_target:
          id: my_stepper
          target: -800
      - delay: 10s
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_speed:
          id: my_stepper
          speed: 100
      - stepper.set_target:
          id: my_stepper
          target: 500

dashboard_import:
  package_import_url: github://jonnywifi/damperctrl/damperctrl.yaml@main

logger:

ota:

wifi:
  ap:
    ssid: ${name}
    password: "12345678"

captive_portal:

api:
  services:
    - service: "vent_open_pcnt"
      variables:
        target: int
        speed: int
      then:
        - stepper.set_speed:
            id: my_stepper
            speed: !lambda 'return speed;'
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return target * 5;'

stepper:
  - platform: a4988
    id: my_stepper
    step_pin: GPIO1
    dir_pin: GPIO3
    max_speed: 300 steps/s
    sleep_pin: GPIO14
    acceleration: 2000.0
    deceleration: 2000.0

text_sensor:
  - platform: template
    name: "${friendly_name} Location"
    id: damper_location
    icon: mdi:map-marker
    update_interval: never
    lambda: |-
      return {"${location}"};

  - platform: template
    name: "${friendly_name} Version"
    id: damper_version
    icon: mdi:tag
    update_interval: never
    lambda: |-
      return {"${version}"};

number:
  - platform: template
    name: "${friendly_name} Percentage"
    id: damper_percentage
    icon: mdi:percent
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    update_interval: 60s
    set_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 500  # Set a default speed or adjust as needed
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return (int(x) * 100 * 5);'
          # Convert percentage to target steps
      - lambda: |-
          id(damper_percentage).publish_state(x);

# Switch components for open more and close more actions
switch:
  - platform: template
    name: "${friendly_name} Open More"
    id: open_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 300  # Adjust speed as needed
      - stepper.relative_move:
          id: my_stepper
          target: -100  # Adjust the step count as needed
      - switch.turn_off: open_more

  - platform: template
    name: "${friendly_name} Close More"
    id: close_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 300  # Adjust speed as needed
      - stepper.relative_move:
          id: my_stepper
          target: 100  # Adjust the step count as needed
      - switch.turn_off: close_more
