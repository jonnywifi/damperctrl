substitutions:
  name: damperctrl
  friendly_name: Damper Control
  location: "--"
  room: "--"
  maxbrightness: "0.0"
  version: "0.44"

esphome:
  platform: ESP8266
  board: d1_mini
  name: "${name}"
  name_add_mac_suffix: true

  project:
    name: esphome.damperctrl
    version: "${version}"

  on_boot:
    then:
      - delay: 10s
      - switch.turn_on:
          id: home_now
      # - stepper.set_speed:
      #     id: my_stepper
      #     speed: 100
      # - stepper.report_position:
      #     id: my_stepper
      #     position: 0
      # - stepper.set_target:
      #     id: my_stepper
      #     target: -1600  # Make sure the vent is fully closed (homed)
      # - delay: 10s
      # - stepper.report_position:
      #     id: my_stepper
      #     position: 0
      # - stepper.set_speed:
      #     id: my_stepper
      #     speed: 100
      # - stepper.set_target:
      #     id: my_stepper
      #     target: 500  # Open vent to the minimum desired position (0% open)

dashboard_import:
  package_import_url: github://jonnywifi/damperctrl/damperctrl.yaml@main

logger:
  level: DEBUG  # Enable detailed logging for debugging

ota:

# wifi:
#   ssid: !secret wifi_ssid
#   password: !secret wifi_password
#   fast_connect: true  # Enable fast connect for quicker connection and reduced overhead

#   manual_ip:
#     static_ip: 192.168.1.137  # Set a static IP
#     gateway: 192.168.1.1
#     subnet: 255.255.255.0

api:
  password: !secret api_password

services:
  - service: "vent_open_pcnt"
    variables:
      target: int
      speed: int
    then:
      - stepper.set_speed:
          id: my_stepper
          speed: !lambda 'return speed;'
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return target * 5;'

stepper:
  - platform: a4988
    id: my_stepper
    step_pin: GPIO1
    dir_pin: GPIO3
    max_speed: 800 steps/s
    sleep_pin: GPIO14
    acceleration: 2000.0
    deceleration: 2000.0

switch:
  - platform: template
    name: "${friendly_name} Open More"
    id: open_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Adjust speed as needed
      - lambda: |-
          int current_position = id(my_stepper).current_position;
          id(my_stepper).set_target(current_position + 100);  # Adjust the step count as needed
      - switch.turn_off: open_more

  - platform: template
    name: "${friendly_name} Close More"
    id: close_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Adjust speed as needed
      - lambda: |-
          int current_position = id(my_stepper).current_position;
          id(my_stepper).set_target(current_position - 100);  # Adjust the step count as needed
      - switch.turn_off: close_more

  - platform: template
    name: "${friendly_name} Identify"
    id: identify
    turn_on_action:
      - lambda: |-
          for (int i = 0; i < 10; i++) {
            // Toggle GPIO14 for LED and ensure stepper driver is not affected
            digitalWrite(14, HIGH);  // Turn on LED
            delay(500);              // Wait 500ms
            digitalWrite(14, LOW);   // Turn off LED
            delay(500);              // Wait 500ms
          }
      - switch.turn_off: identify

  - platform: template
    name: "${friendly_name} Home Now"
    id: home_now
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_target:
          id: my_stepper
          target: -2000  # Make sure the vent is fully closed (homed)
      - delay: 10s
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_speed:
          id: my_stepper
          speed: 100
      - stepper.set_target:
          id: my_stepper
          target: 500  # Open vent to the minimum desired position (0% open)
      - switch.turn_off: home_now

text_sensor:
  - platform: template
    name: "${friendly_name} Location"
    id: damper_location
    icon: mdi:map-marker
    update_interval: never
    lambda: |-
      return {"${location}"};

  - platform: template
    name: "${friendly_name} Version"
    id: damper_version
    icon: mdi:tag
    update_interval: never
    lambda: |-
      return {"${version}"};

number:
  - platform: template
    name: "${friendly_name} Percentage"
    id: damper_percentage
    icon: mdi:percent
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    update_interval: 60s
    set_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Set a default speed or adjust as needed
      - stepper.set_target:
          id: my_stepper
          # Convert percentage to target steps
          target: !lambda 'return (int(x) * 100 * 5);'
      - lambda: |-
          id(damper_percentage).publish_state(x);
