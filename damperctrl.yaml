substitutions:
  name: damperctrl
  friendly_name: Damper Control
  location: "--"
  room: "--"
  maxbrightness: "0.0"
  max_steps: "2000"  # Total steps for full range
  version: "0.71"

esphome:
  platform: ESP8266
  board: d1_mini
  name: "${name}"
  name_add_mac_suffix: true

  project:
    name: esphome.damperctrl
    version: "${version}"

  on_boot:
    priority: 100  # Ensure this runs after network initialization
    then:
      - while:
          condition:
            not:
              api.connected:
          then:
            - lambda: |-
                digitalWrite(1, HIGH);  // Turn on LED
            - delay: 500ms
            - lambda: |-
                digitalWrite(1, LOW);   // Turn off LED
            - delay: 500ms
      - lambda: |-
          digitalWrite(1, LOW);  // Ensure LED is off after connecting
          if (!id(home_now_triggered)) {
            id(home_now_triggered) = true;
            id(home_now).turn_on();
          }

globals:
  - id: home_now_triggered
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: previous_position
    type: int
    restore_value: no
    initial_value: '0'

dashboard_import:
  package_import_url: github://jonnywifi/damperctrl/damperctrl.yaml@main

logger:
  level: DEBUG  # Enable detailed logging for debugging

ota:

api:
  # password: !secret api_password
  encryption:
    key: tghTNoyZDToJo3NldW6A102PI5U/skYb/RLz/LOT+2U=
  services:
    - service: vent_open_pcnt
      variables:
        target: int
        speed: int
      then:
        - stepper.set_speed:
            id: my_stepper
            speed: !lambda 'return speed;'
        - stepper.set_target:
            id: my_stepper
            target: !lambda |-
              int steps = (target * ${max_steps}) / 100;
              // id(damper_position).publish_state(steps);
              return steps;
        - while:
            condition:
              lambda: 'return id(my_stepper).current_position != -2000;'
            then:
              - delay: 100ms  # Adjust this delay as needed
              - lambda: |-
                  id(damper_position).publish_state(steps);


stepper:
  - platform: a4988
    id: my_stepper
    step_pin: GPIO1  # Also connected to the orange "power" LED
    dir_pin: GPIO3 
    max_speed: 1000 steps/s
    sleep_pin: GPIO14  # Also connected to the blue "Active" LED
    acceleration: 1000.0
    deceleration: 1000.0

sensor:
  - platform: template
    name: "${friendly_name} Position"
    id: damper_position
    lambda: |-
      int current_position = id(my_stepper).current_position;
      if (current_position != id(previous_position)) {
        id(previous_position) = current_position;
        float percentage = (current_position / ${max_steps}) * 100;
        id(damper_percentage_number).publish_state(percentage);
      }
      return current_position;

text_sensor:
  - platform: template
    name: "${friendly_name} Location"
    id: damper_location
    icon: mdi:map-marker
    update_interval: 24h
    lambda: |-
      return {"${location}"};

  - platform: template
    name: "${friendly_name} Version"
    id: damper_version
    icon: mdi:tag
    update_interval: 24h
    lambda: |-
      return {"${version}"};

  - platform: template
    name: "${friendly_name} Percentage"
    id: damper_percentage
    icon: mdi:percent
    lambda: |-
      float position = id(damper_position).state;
      float percentage = (position / ${max_steps}) * 100;
      char buffer[10];
      snprintf(buffer, sizeof(buffer), "%.1f%%", percentage);
      return {buffer};

switch:
  - platform: template
    name: "${friendly_name} Open More"
    id: open_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Adjust speed as needed
      - lambda: |-
          int current_position = id(my_stepper).current_position;
          int target_position = current_position + (${max_steps} / 10);  // Move 1% more
          id(my_stepper).set_target(target_position);
          id(damper_position).publish_state(target_position);
      - switch.turn_off: open_more

  - platform: template
    name: "${friendly_name} Close More"
    id: close_more
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Adjust speed as needed
      - lambda: |-
          int current_position = id(my_stepper).current_position;
          int target_position = current_position - (${max_steps} / 10);  // Move 1% less
          id(my_stepper).set_target(target_position);
          id(damper_position).publish_state(target_position);
      - switch.turn_off: close_more

  - platform: template
    name: "${friendly_name} Identify"
    id: identify
    turn_on_action:
      - lambda: |-
          for (int i = 0; i < 10; i++) {
            // Toggle GPIO14 for LED and ensure stepper driver is not affected
            digitalWrite(14, HIGH);  // Turn on LED
            delay(500);              // Wait 500ms
            digitalWrite(14, LOW);   // Turn off LED
            delay(500);              // Wait 500ms
          }
      - switch.turn_off: identify

  - platform: template
    name: "${friendly_name} Home Now"
    id: home_now
    turn_on_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 300
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_target:
          id: my_stepper
          target: -2000  # Make sure the vent is fully closed (homed)
      - while:
          condition:
            lambda: 'return id(my_stepper).current_position != -2000;'
          then:
            - delay: 100ms  # Adjust this delay as needed
      - stepper.report_position:
          id: my_stepper
          position: 0
      - stepper.set_speed:
          id: my_stepper
          speed: 300
      - stepper.set_target:
          id: my_stepper
          target: !lambda 'return (30 * ${max_steps}) / 100;'
      - while:
          condition:
            lambda: 'return id(my_stepper).current_position != (30 * ${max_steps}) / 100;'
          then:
            - delay: 100ms  # Adjust this delay as needed
      - lambda: |-
          int position = (30 * ${max_steps}) / 100;
          id(damper_position).publish_state(position);
      - switch.turn_off: home_now

number:
  - platform: template
    name: "${friendly_name} Percentage"
    id: damper_percentage_number
    icon: mdi:percent
    min_value: 0
    max_value: 100
    step: 1
    unit_of_measurement: "%"
    set_action:
      - stepper.set_speed:
          id: my_stepper
          speed: 800  # Set a default speed or adjust as needed
      - stepper.set_target:
          id: my_stepper
          target: !lambda |-
            int steps = (int(x) * ${max_steps}) / 100;
            id(damper_position).publish_state(steps);
            return steps;
      - lambda: |-
          id(damper_percentage_number).publish_state(x);
