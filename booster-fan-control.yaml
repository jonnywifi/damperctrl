substitutions:
  name: booster-fan-control
  friendly_name: Booster Fan Control
#   maxbrightness: "0.5"
  maxbrightness: "0.0"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: esphome.booster-fan-control
    version: "0.1"
  # Home the damper at startup
#   on_boot:
#     then:
# #       - light.turn_off: 
# #           id: activity_led
#       # Move 150 steps forward
#       - delay: 5s
#       - stepper.set_speed:
#           id: my_stepper
#           speed: 200   
#       - stepper.report_position:
#           id: my_stepper
#           position: 0
#       - stepper.set_target:
#           id: my_stepper
#           target: -800
#       - delay: 10s
#       - stepper.report_position:
#           id: my_stepper
#           position: 0
#       - stepper.set_speed:
#           id: my_stepper
#           speed: 100   
#       - stepper.set_target:
#           id: my_stepper
#           target: 500
#       - delay: 5s
#       - switch.turn_on:
#           id: SlowBreathing
#       - light.turn_on: 
#           id: led
#           brightness: ${maxbrightness}
#           effect: "Slow Pulse"              

esp8266:
  board: d1_mini
  
dashboard_import:
  package_import_url: github://jonnywifi/damperctrl/boosterfancontrol.yaml
  
# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "8NzxlvDudR7gN4/7EcPqbi8V8N99OGqk3xKAM++hN10="
#   services:
#     - service: "set_booster_fan_speed"
#       variables:
#         speed: int
#       then:
#         - light.turn_on: 
#             id: fan_pwm_out
#             brightness: ${maxbrightness}
# #         - delay: 1s
# #         - light.turn_off: 
# #             id: activity_led 
# #         - delay: 1s
#         - stepper.set_speed:
#             id: my_stepper
#             speed: !lambda 'return speed;'
#         - stepper.set_target:
#             id: my_stepper
#             target: !lambda 'return target * 5;'
#         - delay: 10s
#         - switch.turn_on:
#             id: SlowBreathing
#             id: !lambda |-
#               if ( target > 30 ) {
#                 return "SlowBreathing";
#               }else {
#                 return "FastBreathing";
#               }          
                
#     - service: "vent_reset_home"
#       variables:
#         state: bool
#       then:
#         - light.turn_off: 
#             id: activity_led    
#         - stepper.report_position:
#             id: my_stepper
#             position: 0
#         - stepper.set_target:
#             id: my_stepper
#             target: 0            
#         - delay: 5s
#         - light.turn_on: 
#             id: SlowBreathing
#     - service: "orange_led_state"
#       variables:
#         state: bool
#         brightness: int
#         rate: int
#       then:
#          - light.turn_on: 
#              id: activity_led
#              brightness: !lambda 'return brightness;'
             
#              brightness: ${maxbrightness}
# #         - delay: 1s
#         - light.turn_off: 
#             id: activity_led 
#         - delay: 1s
#         - stepper.set_speed:
#             id: my_stepper
#             speed: !lambda 'return speed;'

ota:
  password: "fd37798044329b9bd687d341582bbf86"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name}"
    password: "2VFwuEcSBiT1"

# switch:
#   - platform: gpio
#     pin:
#       number: D4
#       inverted: false
#     id: fan_pwm_out
#     name: Fan PWM
#     restore_mode: RESTORE_DEFAULT_OFF

#   - platform: template
#     name: "Flash Orange LED Slow"
#     optimistic: yes
#     id: SlowBreathing
#     turn_on_action:
#     - while:
#         condition:
#           lambda: 'return true;'
#         then:
#         - light.turn_on: 
#             id: activity_led
#             brightness: ${maxbrightness}
#             effect: none
#         - delay: 3s
#         - light.turn_off:
#             id: activity_led
# #             transition_length: 2s
#         - delay: 3s
#     turn_off_action:
#     - light.turn_off: activity_led

#   - platform: template
#     name: "Flash Orange LED Fast"
#     optimistic: yes
#     id: FastBreathing
#     turn_on_action:
#     - while:
#         condition:
#           lambda: 'return true;'
#         then:
#         - light.turn_on: 
#             id: activity_led
#             brightness: ${maxbrightness}
#             transition_length: 500ms
# #             effect: none
#         - delay: 1s
#         - light.turn_off:
#             id: activity_led
#         - delay: 1s
#     turn_off_action:
#     - light.turn_off: activity_led

output:
  - platform: esp8266_pwm
    pin: D4
    frequency: 5000 Hz
    id: fan_pwm_output

fan:
  platform: speed
  output: fan_pwm_output
  name: "Booster Fan ${name}"

    
# light:
#   - platform: monochromatic
#     name: "Damper Activity LED"
#     id: activity_led
#     output: led_gpio
###
#     effects:
#     - pulse:
#     - pulse:
#         name: "Fast Pulse"
#         transition_length: 0.5s
#         update_interval: 0.5s
#     - pulse:
#         name: "Slow Pulse"
#         transition_length: 2s      # defaults to 1s
#         update_interval: 5s    

text_sensor:
  - platform: template
    name: ${name} Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    
sensor:
  - platform: uptime
    name: ${name} Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
              
